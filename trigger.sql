-- Il donatore non dev'essere minorenne né troppo maggiorenne [DONATORE] 
CREATE OR REPLACE TRIGGER ETA_DONATORE
BEFORE INSERT ON DONATORE
FOR EACH ROW
DECLARE
MINORENNE_DON EXCEPTION; 
TOO_OLD EXCEPTION; 

BEGIN 
IF MONTHS_BETWEEN(SYSDATE,:NEW.DN_DON)<=(12*18)
THEN 
		RAISE MINORENNE_DON; 
END IF; 

IF MONTHS_BETWEEN(SYSDATE, :NEW.DN_DON)>=(12*100)
THEN 
		RAISE TOO_OLD; 
END IF; 

EXCEPTION
WHEN MINORENNE_DON THEN RAISE_APPLICATION_ERROR(-20224,'Il donatore non deve essere minorenne'); 
WHEN TOO_OLD THEN RAISE_APPLICATION_ERROR(-20227, 'Il donatore non puo essere dracula'); 
END;

/ 

SHO ERR; 


-- Il dottore dev'avere almeno 25 anni ma non deve superare gli anni della pensione DOTTORE] 
CREATE OR REPLACE TRIGGER ETA_DOTTORE
BEFORE INSERT ON DOTTORE
FOR EACH ROW
DECLARE
MINORENNE_DOT EXCEPTION; 
PENSIONE EXCEPTION; 
BEGIN 
IF MONTHS_BETWEEN(SYSDATE,:NEW.DN_DOT)<=(12*25)
THEN 
		RAISE MINORENNE_DOT; 
END IF; 
IF MONTHS_BETWEEN(SYSDATE, :NEW.DN_DOT)>=(12*70)
THEN RAISE PENSIONE; 
END IF; 
EXCEPTION
WHEN MINORENNE_DOT THEN RAISE_APPLICATION_ERROR(-20225,'Il dottore non puo essere un bimbo prodigio'); 
WHEN PENSIONE THEN RAISE_APPLICATION_ERROR(-20229, 'Il dottore ha la pensione non puo esercitare'); 
END;

/ 

SHO ERR; 

-- Il cliente non dev'essere minorenne né troppo anziano [CLIENTE] 
CREATE OR REPLACE TRIGGER ETA_CLIENTE
BEFORE INSERT ON CLIENTE
FOR EACH ROW
DECLARE
MINORENNE_CLI EXCEPTION; 
TOO_OLD EXCEPTION; 
BEGIN 
IF MONTHS_BETWEEN(SYSDATE,:NEW.DN_CLI)<=(12*18)
THEN 
		RAISE MINORENNE_CLI; 
END IF; 
IF MONTHS_BETWEEN(SYSDATE, :NEW.DN_CLI)>=(12*70)
THEN 	
		RAISE TOO_OLD; 
END IF; 
EXCEPTION
WHEN MINORENNE_CLI THEN RAISE_APPLICATION_ERROR(-20226,'Il cliente non puo essere minorenne'); 
WHEN TOO_OLD THEN RAISE_APPLICATION_ERROR(-20230, 'Il cliente e troppo vecchio'); 
END;
/ 

SHO ERR; 

-- La data di chiusura della cartella clinica non deve essere piu giovane della data di apertura della stessa [CARTELLA CLINICA]
CREATE OR REPLACE TRIGGER TRIGGER_C_CLINICA
BEFORE INSERT OR UPDATE ON CARTELLA_CLINICA
FOR EACH ROW
DECLARE 
PARADOX_CLINIC EXCEPTION; 
BEGIN 
IF (:NEW.DATA_CHIUSURA<:NEW.DATA_CREAZIONE OR :NEW.DATA_CHIUSURA<:OLD.DATA_CREAZIONE)
THEN 
		RAISE PARADOX_CLINIC; 
END IF; 
EXCEPTION
WHEN PARADOX_CLINIC THEN RAISE_APPLICATION_ERROR(-20221,'Non si puo chiudere la cartella prima di aprirla'); 
END; 

/

SHO ERR; 
-- Prima che il donatore doni la fiala del seme bisogna controllare che abbia fatto un prelievo di sangue entro 30 giorni e che non abbia malattie infettive [FIALA_SEME]

CREATE OR REPLACE TRIGGER SEME_VALIDO
BEFORE INSERT OR UPDATE ON FIALA_SEME
FOR EACH ROW
DECLARE
DO_PRELIEVO EXCEPTION; 
CARIOTIPO_FLAG CHAR(4); 
ESONE7_FLAG NUMBER; 
IRT_FLAG NUMBER;
CNTZ_FLAG NUMBER; 
VOL_FLAG NUMBER; 
MOT_FLAG NUMBER; 
PH_FLAG NUMBER; 
FLAG NUMBER; 
    
BEGIN
IF INSERTING
THEN 
:NEW.SANO:='SI'; 

SELECT CARIOTIPO, IRT, ESONE7 INTO CARIOTIPO_FLAG, IRT_FLAG, ESONE7_FLAG
FROM GENETICO 
WHERE COD_E_GENETICO=:NEW.COD_E_GENETICO; 

IF (CARIOTIPO_FLAG<>'46XY' OR ESONE7_FLAG<>1 OR (IRT_FLAG<5 OR IRT_FLAG>50))
THEN 
:NEW.SANO:='NO'; 
END IF; 
--VALORI SPERMIOGRAMMA 
SELECT CNTZ, VOL, MOT, PH INTO CNTZ_FLAG, VOL_FLAG, MOT_FLAG, PH_FLAG
FROM SPERMIOGRAMMA 
WHERE COD_E_SPERMIOGRAMMA=:NEW.COD_E_SPERMIOGRAMMA; 

IF (CNTZ_FLAG<15 OR MOT_FLAG<40 OR PH_FLAG<7 OR VOL_FLAG<2)
THEN :NEW.SANO:='NO';  
END IF; 

--VALORI SUL SANGUE 
FLAG:=0; 

SELECT COUNT(*) INTO FLAG --CONTROLLA SE HA AVUTO MALATTIE INFETTIVE IN PRECEDENZA
FROM FIALA_SANGUE 
WHERE CF_DON=:NEW.CF_DON AND SANO = 'NO';

IF FLAG>0 
THEN :NEW.SANO:='NO'; 
END IF; 


SELECT COUNT(*) INTO FLAG --CONTROLLA SE ESISTONO DELLE FIALE SANGUE VALIDE ENTRO TRENTA GIORNI
FROM FIALA_SANGUE
WHERE CF_DON=:NEW.CF_DON    AND TO_DATE(DATA_SANGUE,'DD/MM/YYYY') BETWEEN  TO_DATE(:NEW.DATA_SEME, 'DD/MM/YYYY')-30 AND TO_DATE(:NEW.DATA_SEME, 'DD/MM/YYYY');

IF FLAG<=0  
THEN RAISE DO_PRELIEVO;
END IF;

 
END IF; 

EXCEPTION
WHEN DO_PRELIEVO
THEN RAISE_APPLICATION_ERROR(-20227,'BISOGNA FARE L ESAME DEL SANGUE PRIMA DI DONARE');
END; 
/

SHO ERR; 



CREATE OR REPLACE TRIGGER CONTROLLO_INSEMINAZIONE
BEFORE INSERT OR UPDATE ON INSEMINAZIONE
FOR EACH ROW
DECLARE
COUNT_FIALE NUMBER;
CF_FLAG CHAR(16);
DATA_INSEMINAZIONE DATE;
MANCA_FIALE EXCEPTION;
MALATTIA_TROVATA EXCEPTION;

BEGIN

COUNT_FIALE:=0;

SELECT DATA_ORA, CF_CLI INTO DATA_INSEMINAZIONE, CF_FLAG
FROM PRENOTAZIONE
WHERE ID_PREN = :NEW.ID_PREN;

SELECT COUNT(*) INTO COUNT_FIALE --CONTROLLA SE HA AVUTO MALATTIE INFETTIVE IN PRECEDENZA
FROM FIALA_SANGUE 
WHERE CF_CLI=CF_FLAG AND SANO = 'NO';

IF COUNT_FIALE>0 
THEN RAISE MALATTIA_TROVATA;
END IF; 


SELECT COUNT(*) INTO COUNT_FIALE --CONTROLLA SE ESISTONO DELLE FIALE SANGUE VALIDE ENTRO TRENTA GIORNI
FROM FIALA_SANGUE
WHERE CF_CLI=CF_FLAG    AND TO_DATE(DATA_SANGUE,'DD/MM/YYYY') BETWEEN  TO_DATE(DATA_INSEMINAZIONE, 'DD/MM/YYYY')-30 AND TO_DATE(DATA_INSEMINAZIONE, 'DD/MM/YYYY');

IF COUNT_FIALE<=0  
THEN RAISE MANCA_FIALE;
END IF;

EXCEPTION

WHEN MALATTIA_TROVATA
THEN RAISE_APPLICATION_ERROR(-2391, 'TROVATA UNA MALATTIA VENEREA, IMPOSSIBILE ESEGUIRE UNA INSEMINAZIONE');

WHEN MANCA_FIALE
THEN RAISE_APPLICATION_ERROR(-2392, 'NON CI SONO FIALE DI SANGUE NEGLI ULTIMI 30 GIORNI, IMPOSSIBILE ESEGUIRE UNA INSEMINAZIONE');

END;

/ 

SHO ERR; 

CREATE OR REPLACE TRIGGER SANGUE_SANO
BEFORE INSERT OR UPDATE ON FIALA_SANGUE 
FOR EACH ROW
DECLARE
LINF_FLAG NUMBER; 
TPHA_FLAG NUMBER; 
VLDRL_FLAG NUMBER; 

PROL_FLAG NUMBER; 
FSH_FLAG NUMBER; 

BEGIN

:NEW.SANO:='SI'; 
IF :NEW.CF_DON IS NOT NULL -- INIZIO 
THEN 
	
	SELECT LINFOCITICD4, TPHA, VLDRL INTO LINF_FLAG, TPHA_FLAG, VLDRL_FLAG
	FROM SANGUE 
	WHERE COD_E_SANGUE=:NEW.COD_E_SANGUE; 
	
	IF (LINF_FLAG<500 OR LINF_FLAG>1100 OR TPHA_FLAG<4 OR VLDRL_FLAG<1280)
	THEN 
		:NEW.SANO:='NO'; 
	END IF; 
	
ELSE IF(:NEW.COD_E_SANGUE IS NOT NULL)
	THEN
	SELECT LINFOCITICD4, TPHA, VLDRL INTO LINF_FLAG, TPHA_FLAG, VLDRL_FLAG
	FROM SANGUE 
	WHERE COD_E_SANGUE=:NEW.COD_E_SANGUE; 
	
	ELSE IF (:NEW.COD_E_FERTILITA IS NOT NULL)
	THEN 
	SELECT PROLATTINA, FSH INTO PROL_FLAG, FSH_FLAG
	FROM FERTILITA 
	WHERE COD_E_FERTILITA=:NEW.COD_E_FERTILITA; 
	END IF;
	END IF; 
	
	IF ((LINF_FLAG<500 OR LINF_FLAG>1100 OR TPHA_FLAG<4 OR VLDRL_FLAG<1280) OR (FSH_FLAG<1 OR FSH_FLAG>10 OR PROL_FLAG<2 OR PROL_FLAG>28))
	THEN 
		:NEW.SANO:='NO'; 
	END IF; 
	
END IF; -- FINE 
END; 

/

SHO ERR; 


-- 2 prenotazioni nello stesso orario e stessa sala [PRENOTAZIONE] 

CREATE OR REPLACE TRIGGER ID_PRENOTAZIONE
BEFORE INSERT OR UPDATE ON PRENOTAZIONE
FOR EACH ROW
DECLARE
NO_MPREG EXCEPTION;
BE_DONATORE EXCEPTION;
NOT_GRANTED EXCEPTION; 

SESSO_FLAG CHAR(1); 
FLAG NUMBER; 

BEGIN
IF INSERTING 
THEN 
SELECT ID_PREN_S.NEXTVAL INTO :NEW.ID_PREN
FROM   DUAL;
END IF; 
FLAG:= 0; 
IF (:NEW.TIPO_PREN='INSEMINAZIONE' OR :NEW.TIPO_PREN='FERTILITA')
THEN 
	
	SELECT COUNT(*) INTO FLAG
	FROM DONATORE 
	WHERE :NEW.CF_DON=CF_DON; 
	
	IF FLAG>0
	THEN RAISE NO_MPREG;
	END IF;
	
	SELECT COUNT(*) INTO FLAG 
	FROM CLIENTE 
	WHERE :NEW.CF_CLI=CF_CLI AND (SESSO_CLI='M'); 
	
	IF FLAG>0
	THEN RAISE NO_MPREG; 
	END IF; 
 
END IF; 

IF (:NEW.TIPO_PREN='DONAZIONE' AND (:NEW.CF_CLI IS NOT NULL))
THEN  RAISE BE_DONATORE; 
END IF; 

IF(:NEW.CF_CLI IS NOT NULL)
THEN SELECT SESSO_CLI INTO SESSO_FLAG FROM CLIENTE WHERE CF_CLI=:NEW.CF_CLI; 
IF (SESSO_FLAG='M')
THEN RAISE NOT_GRANTED; 
END IF;
END IF; 

EXCEPTION

WHEN NO_MPREG
THEN RAISE_APPLICATION_ERROR(-20025,'LA SCIENZA NON E ARRIVATA COSI LONTANO'); 

WHEN BE_DONATORE
THEN RAISE_APPLICATION_ERROR(-20026,'DEVE PRIMA REGISTRARSI COME DONATORE'); 

WHEN NOT_GRANTED
THEN RAISE_APPLICATION_ERROR (-20029,'AL CLIENTE NON E CONCESSO FARE QUESTI ESAMI'); 

END; 


/

SHO ERR; 



CREATE OR REPLACE TRIGGER PREN_SANG
BEFORE INSERT OR UPDATE ON SANGUE 
FOR EACH ROW
DECLARE
NO_MATCH EXCEPTION; 
TIPO VARCHAR(20);

BEGIN 

SELECT TIPO_PREN INTO TIPO 
FROM PRENOTAZIONE 
WHERE ID_PREN=:NEW.ID_PREN; 

IF (TIPO<>'SANGUE')
THEN 
RAISE NO_MATCH;
END IF; 


EXCEPTION
WHEN NO_MATCH
THEN RAISE_APPLICATION_ERROR(-20230, 'LA PRENOTAZIONE CORRISPONDENTE A QUESTO ESAME NON DICHIARA LO STESSO TIPO'); 


END; 

/ 

SHO ERR; 


CREATE OR REPLACE TRIGGER PREN_GENE
BEFORE INSERT OR UPDATE ON GENETICO 
FOR EACH ROW
DECLARE
NO_MATCH EXCEPTION; 
TIPO VARCHAR(20); 

BEGIN 

SELECT TIPO_PREN INTO TIPO
FROM PRENOTAZIONE
WHERE ID_PREN=:NEW.ID_PREN; 

IF(TIPO<>'GENETICO')
THEN 
RAISE NO_MATCH; 
END IF; 

EXCEPTION 
WHEN NO_MATCH 
THEN RAISE_APPLICATION_ERROR(-20231,'LA PRENOTAZIONE CORRISPONDENTE A QUESTO ESAME NON DICHIARA LO STESSO TIPO'); 

END; 

/ 

SHO ERR; 

CREATE OR REPLACE TRIGGER PREN_SPERM 
BEFORE INSERT OR UPDATE ON SPERMIOGRAMMA
FOR EACH ROW
DECLARE
NO_MATCH EXCEPTION; 
TIPO VARCHAR(20); 
BEGIN 

SELECT TIPO_PREN INTO TIPO
FROM PRENOTAZIONE
WHERE ID_PREN=:NEW.ID_PREN; 

IF(TIPO<>'SPERMIOGRAMMA')
THEN 
RAISE NO_MATCH; 
END IF; 

EXCEPTION

WHEN NO_MATCH
THEN RAISE_APPLICATION_ERROR(-20232,'LA PRENOTAZIONE CORRISPONDENTE A QUESTO ESAME NON DICHIARA LO STESSO TIPO'); 

END; 

/ 

SHO ERR; 


CREATE OR REPLACE TRIGGER PREN_FERT
BEFORE INSERT OR UPDATE ON FERTILITA
FOR EACH ROW 
DECLARE 
NO_MATCH EXCEPTION; 
TIPO VARCHAR(20); 

BEGIN 

SELECT TIPO_PREN INTO TIPO 
FROM PRENOTAZIONE
WHERE ID_PREN=:NEW.ID_PREN; 

IF(TIPO<>'FERTILITA')
THEN 
RAISE NO_MATCH; 
END IF; 

EXCEPTION

WHEN NO_MATCH 
THEN RAISE_APPLICATION_ERROR(-20233, 'LA PRENOTAZIONE CORRISPONDENTE A QUESTO ESAME NON DICHIARA LO STESSO TIPO'); 

END; 

/ 

SHO ERR; 

-- CONTROLLO CHE LA DATA DI CHIUSURA NON SIA MINORE DELLA DATA DI APERTURA DELLA STESSA 
CREATE OR REPLACE TRIGGER CHIUSURA_CARTELLA 
BEFORE UPDATE ON CARTELLA_CLINICA 
FOR EACH ROW
DECLARE 
COUNTER NUMBER; 

NOT_GRANTED EXCEPTION; 
BACK_IN_TIME EXCEPTION; 
BEGIN 
IF (:NEW.DATA_CHIUSURA IS NOT NULL)
THEN 
	IF (:NEW.DATA_CHIUSURA < :OLD.DATA_CREAZIONE)
	THEN RAISE BACK_IN_TIME; 
	END IF; 
END IF; 

IF (:OLD.DATA_CHIUSURA IS NOT NULL AND :NEW.DATA_CHIUSURA IS NOT NULL) -- controlla che la nuova data non sia minore della data di apertura e che non siano previsti
-- esami dopo la data della nuova chiusura
THEN 
	IF (:NEW.DATA_CHIUSURA < :OLD.DATA_CREAZIONE)
	THEN RAISE BACK_IN_TIME; 
	END IF; 

	COUNTER:=0; 

	IF(:OLD.CF_CLI IS NOT NULL) -- se la cartella clinica appartiene al cliente 
	THEN 
	SELECT COUNT(*) INTO COUNTER 
	FROM PRENOTAZIONE 
	WHERE CF_CLI=:OLD.CF_CLI AND DATA_ORA>:NEW.DATA_CHIUSURA; 

		IF (COUNTER>0)
		THEN RAISE NOT_GRANTED; 
		END IF; 

	ELSE 
	SELECT COUNT(*) INTO COUNTER 
	FROM PRENOTAZIONE 
	WHERE CF_DON=:OLD.CF_DON AND DATA_ORA>:NEW.DATA_CHIUSURA; 

		IF (COUNTER>0)
		THEN RAISE NOT_GRANTED; 
		END IF; 
	END IF; 
END IF; 
EXCEPTION 
WHEN BACK_IN_TIME 
THEN RAISE_APPLICATION_ERROR(-20289, 'LA CARTELLA CLINICA NON HA UNA DELOREAN');

WHEN NOT_GRANTED
THEN RAISE_APPLICATION_ERROR(-20290, 'NON SI PUO CHIUDERE LA CARTELLA PERCHE SONO PREVISTI SERVIZI'); 

END; 

